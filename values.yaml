replicaCount: 1

clusterDomain: cluster.local

image:
  repository: andrewvmiller/mlflow
  tag: 1.30.0
  pullPolicy: IfNotPresent

artifactRoot: "s3://mlflow/artifacts"

postgresql:
  enabled: true
  storageClass: ""
  global:
    postgresql:
      postgresqlDatabase: postgres
      postgresqlUsername: postgres
      postgresqlPassword: postgres
      servicePort: 5432
  persistence:
    enabled: true
    size: 10Gi

minio:
  url: minio.default.svc.cluster.local:9000
  accessKey: secret
  secretKey: secret

nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 80
  annotations: { }
  ## Set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  # loadBalancerIP:

  ## Load Balancer sources
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ##
  # loadBalancerSourceRanges:
  # - 10.10.10.0/24

## Configure Ingress based on the documentation here: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: false
  annotations: { }
  # cert-manager.io/cluster-issuer: "lets-encrypt"
  path: /
  tls: [ ]
#    - secretName: mlflow-tls
#      hosts:
#        - mlflow.example.com
  hosts: [ mlflow.test ]
#    - host: mlflow.example.com
#      paths:
#        - path: /
#          pathType: Prefix


resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# volumes:
#   - name: minio
#     persistentVolumeClaim:
#       claimName: minio

nodeSelector: { }

tolerations: [ ]

affinity: { }
